// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String?
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  likes         Like[]
  comments      Comment[]
  posts         Post[]
  replies       Reply[]
}

model Store{
  id      Int @id @default(autoincrement())
  phone   String? //tel_no 전화번호
  address String? //cob_code_nm 코드명
  lat     String? //x좌표
  lng     String?
  name    String?
  category String?
  foodCertifyName String?
  storeType String?
  // likes         Like[]
  // comments      Comment[]
}

model Post{
  id  Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId Int
  road_address_name String
  place_name String
  phone String?
  lat   String?
  lng   String?
  place_url String?
  category_group_name   String? //대분류
  category_name   String? //소분류
  content   String
  star  Int
  user   User   @relation(fields: [userId],references: [id],onDelete: Cascade)
  likes         Like[]
  comments      Comment[]
  
}

model Like{
  id    Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  storeId   Int
  userId    Int
  store   Post   @relation(fields: [storeId],references: [id],onDelete: Cascade)
  user   User   @relation(fields: [userId],references: [id],onDelete: Cascade)
  @@index([userId,storeId])
}

model Comment{
  id    Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  storeId   Int
  userId    Int
  body      String
  store   Post   @relation(fields: [storeId],references: [id],onDelete: Cascade)
  user   User   @relation(fields: [userId],references: [id],onDelete: Cascade)
  replies Reply[]
  @@index([userId,storeId])
}

model Reply{
  id    Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  commentId Int
  body      String
  user   User   @relation(fields: [userId],references: [id],onDelete: Cascade)
  comment   Comment   @relation(fields: [commentId],references: [id],onDelete: Cascade)
  @@index([userId,commentId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}